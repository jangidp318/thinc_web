name: 🧠 Thinc Monorepo CI/CD

on:
  push:
    branches:
      - main
      - staging
      - production
  pull_request:
    branches:
      - main
      - staging

jobs:
  setup:
    name: 🧩 Setup & Install
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install dependencies (root workspace)
        run: pnpm install --frozen-lockfile

  lint-and-typecheck:
    name: 🧪 Lint + TypeCheck
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10.14.0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧹 Run ESLint
        run: pnpm lint

      - name: 🔍 Run TypeScript checks
        run: pnpm typecheck

  backend-tests:
    name: ⚙️ Backend Build + Test
    runs-on: ubuntu-latest
    needs: [setup, lint-and-typecheck]

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10.14.0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧱 Build Backend
        run: |
          cd backend
          pnpm build

      - name: 🧪 Run Backend Tests
        run: |
          cd backend
          pnpm test || echo "⚠️ No backend tests found"

  frontend-build:
    name: 🖥️ Frontend Build
    runs-on: ubuntu-latest
    needs: [setup, lint-and-typecheck]

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10.14.0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧱 Build Frontend
        run: |
          cd frontend
          pnpm build

  docker-verify:
    name: 🐳 Docker Compose Verification
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-build]

    steps:
      - uses: actions/checkout@v4

      - name: 🐳 Build and Verify Docker Compose (prod)
        run: |
          docker compose -f docker-compose.prod.yml build
          docker compose -f docker-compose.prod.yml up -d
          sleep 15
          docker compose ps
          docker compose down -v

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-verify]
    if: github.ref == 'refs/heads/staging'

    steps:
      - name: 🧭 Deploy to Staging Server
        env:
          SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
        run: |
          echo "${SSH_KEY}" > key.pem
          chmod 600 key.pem
          ssh -i key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} \
            "cd /var/www/thinc && git pull && docker compose -f docker-compose.prod.yml pull && docker compose -f docker-compose.prod.yml up -d"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-verify]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🧭 Deploy to Production Server
        env:
          SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
          HOST: ${{ secrets.PROD_HOST }}
          USER: ${{ secrets.PROD_USER }}
        run: |
          echo "${SSH_KEY}" > key.pem
          chmod 600 key.pem
          ssh -i key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} \
            "cd /var/www/thinc && git pull && docker compose -f docker-compose.prod.yml pull && docker compose -f docker-compose.prod.yml up -d"
